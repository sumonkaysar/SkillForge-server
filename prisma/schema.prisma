// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String?
  role UserRole @default(USER)
  avatar String?
  status UserStatus @default(ACTIVE)
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogs    Blog[]
}

enum Skillset {
  FRONTEND
  BACKEND
  DATABASE
  TOOLS
  SOFT_SKILLS
}

model Skill {
  id Int @id @default(autoincrement())
  name String
  Icon String?
  color String?
  skillset Skillset
  index Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[] @relation("ProjectSkills")
  
  @@unique(fields: [name, skillset], name: "skill_name_skillset_unique")
}

model Project {
  id Int @id @default(autoincrement())
  name String
  title String
  description String
  longDescription String?
  images String[]
  features String[]
  category String?
  githubFrontend String
  githubBackend String
  liveDemo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  techStack Skill[] @relation("ProjectSkills")
}

model Blog {
  id Int @id @default(autoincrement())
  title String
  content String 
  coverImage String?
  category String?
  tags String[]
  authorId Int
  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author User @relation(fields: [authorId], references: [id])
}